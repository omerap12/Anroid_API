// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ItemsContext))]
    partial class ItemsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.Property<string>("ContactsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConversationsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ContactsId", "ConversationsId");

                    b.HasIndex("ConversationsId");

                    b.ToTable("ConversationUser");
                });

            modelBuilder.Entity("Web_API.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConversationId1")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Created")
                        .HasColumnType("longtext");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ConversationId1")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Web_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Last")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefContactId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Server")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RefContactId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("IsContactOf")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Last")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Server")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IsContactOf");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebApi.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.HasOne("Web_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web_API.Models.Message", b =>
                {
                    b.HasOne("WebApi.Models.Conversation", "RefConversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("WebApi.Models.Conversation", null)
                        .WithOne("Last")
                        .HasForeignKey("Web_API.Models.Message", "ConversationId1");

                    b.HasOne("Web_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("RefConversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web_API.Models.User", b =>
                {
                    b.HasOne("Web_API.Models.User", "RefContact")
                        .WithMany()
                        .HasForeignKey("RefContactId");

                    b.Navigation("RefContact");
                });

            modelBuilder.Entity("WebApi.Models.Contact", b =>
                {
                    b.HasOne("Web_API.Models.User", "RefUser")
                        .WithMany("Contacts")
                        .HasForeignKey("IsContactOf");

                    b.Navigation("RefUser");
                });

            modelBuilder.Entity("Web_API.Models.User", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("WebApi.Models.Conversation", b =>
                {
                    b.Navigation("Last");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
